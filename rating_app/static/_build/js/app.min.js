WebApp.App = Backbone.Marionette.Application.extend({
	config: window.WebApp.config,

	init: function () {
		console.log('App init');

		this.views = {};

		this.layouts = {
			'window': $(window),
			'document': $(document),
			'wrapper': $('body'),
			'htmlBody': $('body, html'),
			'header': $('#js-header'),
			'footer': $('#js-footer'),
			'panelTop': $('#js-panel-top'),
			'panelMid': $('#js-panel-mid'),
			'panelBottom': $('#js-panel-bottom'),
			'panelNavigation': $('#js-panel-navigation'),
			'content': $('#js-content')
		};

		// Следим за кликами по ajax ссылками
		this.layouts.wrapper
			.addClass('app_is_ready')
			.on('click', '.js-ajax', function(event) {
				App.router.navigate(event.currentTarget.getAttribute('href'), {
					trigger: true,
					replace: true
				});
				return false;
			});

		window.onerror = this._bind(this.errorHandler, this);

		this.getAppVars();
	},

	getAppVars: function () {
		var url = App.layouts.document[0].URL,
			params = url.split('?')[1] || '';

		this.appVars = App.unserialize(params);

		if (!parseInt(this.appVars['user_id'], 10)) {
			this.appVars['user_id'] = this.appVars['viewer_id'];
		}
	},



	renderTemplate: function (name, data, callback) {
		data = _.extend(data, {
			'page_params': App.getHashUrl(),
			'is_js': true
		});

		var template = twig({ ref: name });

		if (template) {
			if (callback && typeof(callback) === 'function') {
				callback(template.render(data));
			}
		} else {
			twig({
				id: name,
				href: '/rating_app/tpl/' + name + '.twig',
				load: function (template) {
					if (callback && typeof(callback) === 'function') {
						callback(template.render(data));
					}
				}
			});
		}
	},

	// Метод который полностью подменяет контекст вызова у переданной функции на тот что был передан
	// в параметрах.
	// Более быстрая альтернатива универсальному `fn.bind(context)` (http://jsperf.com/bind-experiment-2)
	//
	// __Пример:__
	//
	//         var a = {
	//             handler: core._bind(fn, context)
	//         }
	_bind: function(fn, context) {
		context || (context = window);

		if (typeof(fn) === 'function') {
			return function() {
				return fn.apply(context, arguments);
			};
		}
		return false;
	},

	// XSS filter
	xssCorrect: function(value) {
		return value.replace(/[<>(){};]/g, '');
	},

	// Метод который получает текущий роутинг и выдает его в более удобном формате для работы
	// разбивая на:
	//
	// * `section` - основная часть роута
	// * `subsection` - дополнительная часть роута
	// * `data` - остальная часть роута
	//
	getHashUrl: function() {
		var fragment = decodeURIComponent(Backbone.history.getFragment() || 'index'),
			correctFragment = this.xssCorrect(fragment), // XSS filter
			data = correctFragment.split('/') || [];

		return {
			section: data[0] || '',
			subsection: data[1] || '',
			data: data[2] || ''
		};
	},

	// Кастомный обработчик ошибок с указанием режима дебага или продакшна
	errorHandler: function(message, file, lineNum) {
		if (!this.config.debugMode) {
			return true;
		} else {
			alert('"' + message + '" on line: ' + lineNum + ' in ' + file);
			return false;
		}
	},

	// Делит массив @array на @count подмассивов
	splitArray: function (array, count) {
		var returnData = {},
			groupeLen, // количество элементов в группе
			index = 0, // индекс групп
			groupeI = 0; // счетчик внутри группы

		if (array && array.length) {
			count = Math.min(count, array.length);
			groupeLen = Math.ceil(array.length / count);

			for (var i = 0, max = array.length; i < max; i++) {
				if (!groupeI) {
					returnData[index] = [];
				}

				returnData[index].push(array[i]);

				if (groupeI >= groupeLen - 1) {
					groupeI = 0;
					index++;
				} else {
					groupeI++;
				}
			}

			return returnData;
		} else {
			return false;
		}
	},

	// Метод получает ширину скролбара
	getScrollBarWidth: function() {
		var inner = document.createElement('p'),
			outer = document.createElement('div'),
			w1, w2;

		inner.style.width = '100%';
		inner.style.height = '200px';

		outer.style.position = 'absolute';
		outer.style.top = '0px';
		outer.style.left = '0px';
		outer.style.visibility = 'hidden';
		outer.style.width = '200px';
		outer.style.height = '150px';
		outer.style.overflow = 'hidden';

		outer.appendChild(inner);
		document.body.appendChild(outer);

		w1 = inner.offsetWidth;
		outer.style.overflow = 'scroll';
		w2 = inner.offsetWidth;

		if (w1 == w2) {
			w2 = outer.clientWidth;
		}

		document.body.removeChild(outer);

		return (w1 - w2);
	},

	getRandomInt: function (min, max) {
		return Math.floor(Math.random() * (max - min + 1)) + min;
	},

	DateUTC: function(time, format, asArray) {
		var d = new Date(),
			splitReg = /[:.]/,
			date = {},
			formatDate = function(d) {
				return ('0' + d).slice(-2);
			};

		time && d.setTime(time);
		date.HH = (function(d) {
			return (d.getUTCFullYear()).toString();
		})(d);
		date.MM = (function(d) {
			return formatDate(d.getUTCMonth() + 1);
		})(d);
		date.WD = (function(d) {
			return formatDate(d.getUTCDay());
		})(d);
		date.DD = (function(d) {
			return formatDate(d.getUTCDate());
		})(d);
		date.H = (function(d) {
			return formatDate(d.getUTCHours());
		})(d);
		date.M = (function(d) {
			return formatDate(d.getUTCMinutes());
		})(d);
		date.S = (function(d) {
			return formatDate(d.getUTCSeconds());
		})(d);
		date.MS = (function(d) {
			var d = d.getUTCMilliseconds();

			return ('00' + d).slice(-3);
		})(d);

		date.hh = (function(d) {
			return d.getUTCFullYear();
		})(d);
		date.mm = (function(d) {
			return d.getUTCMonth();
		})(d);
		date.wd = (function(d) {
			return d.getUTCDay();
		})(d);
		date.dd = (function(d) {
			return d.getUTCDate();
		})(d);
		date.h = (function(d) {
			return d.getUTCHours();
		})(d);
		date.m = (function(d) {
			return d.getUTCMinutes();
		})(d);
		date.s = (function(d) {
			return d.getUTCSeconds();
		})(d);
		date.ms = (function(d) {
			return d.getUTCMilliseconds();
		})(d);

		date.timestamp = (function(d) {
			return d.valueOf();
		})(d);

		if (format) {
			var partialDate = format.split(splitReg),
				symbolResult = splitReg.exec(format),
				delimeterSymbol = symbolResult ? symbolResult[0] : '',
				formatedDate = [];

			$.each(partialDate, function(i, item) {
				formatedDate.push(date[item]);
			});
			return asArray ? formatedDate : formatedDate.join(delimeterSymbol);
		}
		return date;
	},

	// Функция которая по числу выдает правильное склонение слова из трех представленых
	// Пример использования:
	//      App.declension(5, ['комментарий', 'комментария', 'комментариев'])
	//
	declension: function (num, strArr) {
		var plural = (num%10 == 1 && num%100 != 11) ? 0 : (num%10 >= 2 && num%10 <= 4 && (num%100 < 10 || num%100 >= 20) ? 1 : 2);

		return strArr[plural] || '';
	},

	// Метод unserialize
	//
	// Принимает строку в формате "param1=value1&param2=value2" и возвращает объект { param1: 'value1', param2: 'value2' }.
	// Если "param1" заканчивается "[]" параметр рассматривается как массив.
	//
	// Пример:
	//
	// Input:  param1=value1&param2=value2
	// Return: { param1 : value1, param2: value2 }
	//
	// Input:  param1[]=value1&param1[]=value2
	// Return: { param1: [ value1, value2 ] }
	//
	// @TODU Потдержка параметров: "param1[name]=value1" (should return { param1: { name: value1 } })
	unserialize: function(params) {
		params = params.split('&');

		var resultData = {},
			pairs,
			name;

		for (var i = 0, len = params.length; i < len; i++) {
			pairs = params[i].split('=');
			name = pairs[0];

			if (name.indexOf('[]') == name.length - 2 && name.length > 2) {
				name = name.substring(0, name.length - 2);

				if (!$.isArray(resultData[name])) {
					resultData[name] = [];
				}
				if (pairs[1] && pairs[1].length) {
					resultData[name].push(pairs[1]);
				}
			} else {
				resultData[name] = pairs[1];
			}
		}
		return resultData;
	},

	// Делит массив @array на @count подмассивов
	splitArray: function (array, count) {
		var returnData = {},
			groupeLen, // количество элементов в группе
			index = 0, // индекс групп
			groupeI = 0; // счетчик внутри группы

		if (array && array.length) {
			count = Math.min(count, array.length);
			groupeLen = Math.ceil(array.length / count);

			for (var i = 0, max = array.length; i < max; i++) {
				if (!groupeI) {
					returnData[index] = [];
				}

				returnData[index].push(array[i]);

				if (groupeI >= groupeLen - 1) {
					groupeI = 0;
					index++;
				} else {
					groupeI++;
				}
			}

			return returnData;
		} else {
			return false;
		}
	},

	getDayOfWeek: function (excuse) {
		var day = (new Date()).getDay(),
			daysTitleExcuse = ['в субботу', 'в воскресенье', 'в понедельник', 'во вторник', 'в среду', 'в четверг', 'в пятницу'],
			daysTitle = ['субботы', 'воскресенья', 'понедельника', 'вторника', 'среды', 'четверга', 'пятницы'];

		return excuse ? daysTitleExcuse[day] : daysTitle[day];
	}
});
// Набор расширений для `Backbone`, `Marionette`, `Twig`


// Добавляем декодер фрагмента url
// для корректной работы с русскими символами в url
Backbone.History.prototype.getFragment = (function(fn) {
	return function(options) {
		var fragment = fn.apply(this, arguments);
		return decodeURIComponent(fragment)
	};
})(Backbone.History.prototype.getFragment);

// К запросам шаблонов добавляем ревизию
Twig.extend(function (Twig) {
	Twig.Templates.loadRemote = (function(fn) {
		return function(options) {
			arguments[0] += WebApp.config.revision;
			return fn.apply(this, arguments)
		};
	})(Twig.Templates.loadRemote);
});


WebApp.Router = Backbone.Marionette.AppRouter.extend({
	routes: {
		'': 'index',
		'index': 'index',
		'index/': 'index',
		'index/:page': 'index',
		'index/:page/': 'index',
		'help': 'help',
		'help/': 'help',
		'admin': 'admin',
		'admin/': 'admin',

		'*page': 'index'
	},

	run: function (name, options) {
		if (!App.views[name]) {
			App.views[name] = new WebApp.Views[name](options);
		}
	},

	// TODO: это временное решение
	removeViews: function () {
		_.each(App.views, App._bind(function (item, key) {
			item.close();
			delete App.views[key];
		}, this));
	},

	index: function (page) {
		page = parseInt(page, 10) - 1 || 0;

		this.removeViews();

		if (App.appVars['viewer_id'] != '197471121') {
			this.run('Index', { page: page });
		} else {
			this.run('Post');
		}
	},

	help: function () {
		this.removeViews();
		this.run('Help');
	},

	admin: function () {
		this.removeViews();
		this.run('Admin');
	}
});

// Функция которая по числу выдает правильное склонение слова из трех представленых
// Пример использования:
//      {{ declension(5, ['комментарий', 'комментария', 'комментариев']) }}
//
Twig.extendFunction('declension', function (num, strArr) {
	var plural = (num%10 == 1 && num%100 != 11) ? 0 : (num%10 >= 2 && num%10 <= 4 && (num%100 < 10 || num%100 >= 20) ? 1 : 2);

	return strArr[plural] || '';
});
WebApp.Views.Index = Backbone.Marionette.View.extend({
	className: 'index',
	template: 'index',

	templateTopActive: 'top-active',
	templateTop100: 'top-100',
	templateUser: 'user',
	templatePagination: 'pagination',
	pageCount: 7,

	initialize: function () {
		this.curUser = App.appVars['viewer_id'];

		this.data = App.config.bootstrap;
		this.render();
	},

	render: function () {
		App.renderTemplate(this.template, {}, App._bind(function (html) {
			App.layouts.content
				.empty()
				.append(this.$el.html(html));

			this.renderTopActive(this.data.users_last_day);
			this.renderPagination();

			// если выбрана страница > top 105, то таких данных в базе нет
			// и нужно загрузить их через VK API
			if (this.options.page > this.pageCount) {
				this.getNextUsersData(App._bind(function () {
					this.renderTop100(this.data.nextUsers);
				}, this));
			} else {
				this.renderTop100(this.data.users);
			}

			if (this.data.cur_user) { // cur_user - нет изначально в bootstrap данных
				this.setUpdateTimer();
				this.renderUser(this.data.cur_user);
				this.renderPagination(this.data.cur_user);
			} else {
				this.getData(App._bind(function () {
					this.setUpdateTimer();
					this.renderUser(this.data.cur_user);
					this.renderPagination(this.data.cur_user);
				}, this));
			}
		}, this));
	},

	renderTopActive: function (data) {
		App.renderTemplate(this.templateTopActive, {
			items: data.slice().reverse(),
			day: App.getDayOfWeek(true)
		}, App._bind(function (html) {
			this.$el.find('#js-top-active')
				.empty()
				.append(html);
		}, this));
	},

	renderTop100: function (data) {
		// вырезаем данные для нужной страницы, только если выводим страницу из top 105
		if (this.options.page <= this.pageCount) {
			data = data.slice(15 * this.options.page, 15 * this.options.page + 15);

			for (var i = 0; i < data.length; i++) {
				data[i].index = 15 * this.options.page + i + 1;
			}
		} else {
			for (var i = 0; i < data.length; i++) {
				data[i].index = this.data.cur_user.place - 6 + i;
			}
		}

		data = App.splitArray(data, 3);

		App.renderTemplate(this.templateTop100, {
			items: data,
			page: this.options.page
		}, App._bind(function (html) {
			this.$el.find('#js-top-100')
				.empty()
				.append(html);
			this.masonryInit();

			this.$el.find('.top-100-link').hover(function (event) {
				$(event.currentTarget)
					.parent()
					.toggleClass('hover', event.type == 'mouseenter');
			});
		}, this));
	},

	renderPagination: function (cur_user) {
		var cur_user_page;

		if (cur_user && cur_user.rating > 0) {
			cur_user_page = Math.ceil((cur_user.place + 1) / 15);
		}

		App.renderTemplate(this.templatePagination, {
			count: this.pageCount,
			active: this.options.page + 1,
			cur_user_page: cur_user_page
		}, App._bind(function (html) {
			this.$el.find('#js-pagination')
				.empty()
				.append(html);

			cur_user && this.userCornerPosition(cur_user);
		}, this));
	},

	renderUser: function (user) {
		App.renderTemplate(this.templateUser, {
			user: user,
			setting: this.data.setting
		}, App._bind(function (html) {
			this.$el.find('#js-user')
				.empty()
				.append(html);

			this.userCornerPosition(user);
		}, this));
	},

	masonryInit: function () {
		var elem = this.$('.top-100-col');

		elem.imagesLoaded(App._bind(function() {
			elem.masonry({
				itemSelector: '.top-100-item',
				columnWidth: 220,
				gutter: 10,
				isResizeBound: false,
				transitionDuration: '0s'
			}, this);
		}, this));
	},

	getData: function (callback) {
		$.ajax({
			data: {
				cur_user: this.curUser
			},
			dataType: 'json',
			url: '/rating_app/user_data.php',
			type: 'POST',
			success: App._bind(function (response) {
				this.data = response;
				App.config.bootstrap = this.data;

				if (this.data.cur_user) {
					// если текущий пользователь не в топе, то у него нет данных
					this.getUserData(this.curUser, callback);
				}
			}, this)
		});
	},

	// // получает данные пользователя и его город
	getUserData: function (id, callback) {
		VK.api('users.get', {
			user_ids: id,
			fields: 'photo_100,photo_50,city'
		}, App._bind(function (data) {
			if (data && data.response) {
				data = data.response[0];
				this.data.cur_user = _.extend(this.data.cur_user, data);

				VK.api('database.getCitiesById', {
					city_ids: data.city
				}, App._bind(function (cityData) {
					if (cityData && cityData.response) {
						cityData = cityData.response[0];

						this.data.cur_user.city = cityData && cityData['name'] ? cityData['name'] : '';
						this.data.cur_user.place = parseInt(this.data.cur_user.place, 10);
						this.data.cur_user.rating = parseFloat(this.data.cur_user.rating);

						if (callback && typeof(callback) === 'function') {
							callback();
						}
					}
				}, this));
			}
		}, this));
	},

	// получает данные пользователей и их города для массива id
	getUsersData: function (items, callback) {
		VK.api('users.get', {
			user_ids: _.pluck(items, 'id').join(', '),
			fields: 'photo_50,city'
		}, App._bind(function (userData) {
			if (userData && userData.response) {
				userData = userData.response;

				VK.api('database.getCitiesById', {
					city_ids: _.pluck(userData, 'city').join(', ')
				}, App._bind(function (cityData) {
					if (cityData && cityData.response) {
						cityData = cityData.response;

						_.each(items, App._bind(function(item) {
							var userItem = _.find(userData, function (value) {
									return value.uid == item.id;
								}),
								cityItem = _.find(cityData, function (value) {
									return value.cid == userItem.city;
								});

							item = _.extend(item, userItem, {
								'city': cityItem && cityItem['name'] ? cityItem['name'] : ''
							});
						}, this));

						if (callback && typeof(callback) === 'function') {
							callback(items);
						}
					}
				}, this));
			}
		}, this));
	},

	// загрузка данных для страницы рейтинга если мето > 105
	getNextUsersData: function (callback) {
		this.getUsersData(this.data.cur_user_page, App._bind(function(items) {
			this.data.nextUsers = items;

			if (callback && typeof(callback) === 'function') {
				callback(items);
			}
		}, this));
	},

	userCornerPosition: function (user) {
		var index = Math.ceil((user.place + 1) / 15) - 1,
			items = this.$('.pagination-item'),
			elem = (index <= this.pageCount) ? items.eq(index) : items.last(),
			corner = this.$('.user-corner'),
			pos;

		if (user.rating > 0) {
			pos = (elem && elem.length) ? elem.offset().left - 5 : -100000;
			corner.css('left', pos);
		}
	},

	setUpdateTimer: function () {
		this.updateTimeEl = this.$('.update-time');
		this.updateDifEl = this.$('.update-dif');
		setInterval(App._bind(this.updateTimer, this), 1);
	},

	updateTimer: function () {
		var updateDate = this.data.setting['update_date'] * 1000,
			nextUpdateDate = updateDate + 1000 * 60 * 60 * 24,
			dif = nextUpdateDate - new Date(),
			time = new Date() - updateDate,
			updateTime = App.DateUTC(time, 'h');

		dif = App.DateUTC(dif, 'H:M:S');
		this.updateDifEl.html(dif);

		if (parseInt(updateTime, 10) > 0) {
			updateTime += ' ' + App.declension(updateTime, ['час', 'часа', 'часов']);
		} else {
			updateTime = App.DateUTC(time, 'm');
			updateTime += ' ' + App.declension(updateTime, ['минуту', 'минуты', 'минут']);
		}

		this.updateTimeEl.html(updateTime);
	}
});

WebApp.Views.Help = Backbone.Marionette.View.extend({
	className: 'help',
	template: 'help',

	initialize: function () {
		this.render();
	},

	render: function () {
		App.renderTemplate(this.template, {}, App._bind(function (html) {
			App.layouts.content
				.empty()
				.append(this.$el.html(html));
		}, this));
	}
});

WebApp.Views.Admin = Backbone.Marionette.View.extend({
	className: 'admin',
	template: 'admin',

	initialize: function () {
		this.render();
	},

	render: function () {
		App.renderTemplate(this.template, {}, App._bind(function (html) {
			App.layouts.content
				.empty()
				.append(this.$el.html(html));
		}, this));
	}
});

WebApp.Views.Post = Backbone.Marionette.View.extend({
	className: 'post',
	template: 'post',

	initialize: function () {
		App.layouts.content
			.empty()
			.append(this.$el);

		this.getUsers(App._bind(function () {
			this.post(true);
		}, this));
	},

	getUsers: function (callback) {
		$.ajax({
			dataType: 'json',
			url: '/rating_app/user_data.php',
			data: {
				messages: 1
			},
			type: 'POST',
			success: App._bind(function (response) {
				this.data = response;

				if (callback && typeof(callback) === 'function') {
					callback();
				}
			}, this)
		});
	},

	postPhoto: function (photo_url, callback) {
		VK.api('photos.getWallUploadServer', {
			group_id: window.config.VK_GROUPE_ID
		}, function (data) {
			if (data && data.response && data.response.upload_url) {
				var url = data.response.upload_url,
					params = [];

				params.push('upload_url=' + encodeURIComponent(url));
				params.push('image_url=' + photo_url);

				$
					.get('/rating_app/post_photo.php?'+params.join('&'))
					.success(function(data){
						data = $.parseJSON(data);
						data.gid = window.config.VK_GROUPE_ID;

						VK.api('photos.saveWallPhoto', data, callback);
					});
			}
		});
	},

	post: function (everyday) {
		this.postData = {
			publishDate: Math.ceil((new Date().valueOf() + 1000 * 60 * window.config.VK_POST_OFFSET) / 1000)
		};

		if (everyday) {
			// ежедневный пост
			this.postPhoto('../rating_app/phantom/_build/top-active.png', App._bind(function (data) {
				this.postData.photoTA = data.response[0];

				console.log('post'); // метка для phantomjs
				VK.api('wall.post', {
					owner_id: -window.config.VK_GROUPE_ID,
					from_group: 1,
					message: this.getMessage(everyday),
					publish_date: this.postData.publishDate,
					attachments: this.postData.photoTA.id
				}, function () {
					alert('Complete!');
				});
			}, this));
		} else {
			// еженедельный пост
			this.postPhoto('../rating_app/phantom/_build/top-active.png', App._bind(function (data) {
				this.postData.photoTA = data.response[0];

				this.postPhoto('../rating_app/phantom/_build/top-100-1.png', App._bind(function (data) {
					this.postData.photoT100_1 = data.response[0];

					this.postPhoto('../rating_app/phantom/_build/top-100-19.png', App._bind(function (data) {
						this.postData.photoT100_19 = data.response[0];

						this.postPhoto('../rating_app/phantom/_build/top-100-37.png', App._bind(function (data) {
							this.postData.photoT100_37 = data.response[0];

							console.log('post'); // метка для phantomjs
							VK.api('wall.post', {
								owner_id: -window.config.VK_GROUPE_ID,
								from_group: 1,
								message: this.getMessage(everyday),
								publish_date: this.postData.publishDate,
								attachments: this.postData.photoTA.id + ','
									+ this.postData.photoT100_1.id + ','
									+ this.postData.photoT100_19.id + ','
									+ this.postData.photoT100_37.id
							}, function () {
								alert('Complete!');
							});
						}, this));
					}, this));
				}, this));
			}, this));
		}
	},

	getMessage: function (everyday) {
		var users = this.data.users_last_day.slice().reverse(),
			data = {
				day: App.getDayOfWeek()
			},
			messgeIndex = App.getRandomInt(0, this.data.messages.length - 1),
			template = this.data.messages[messgeIndex].text,
			text = '';

		template = twig({
			data: template
		});

		for (var i = 0; i < users.length; i++) {
			data['username' + (i + 1)] = '@id' + users[i].id;
		}

		text += template.render(data);
		text += '\n\n';
		text += 'Посмотреть полный рейтинг клуба — vk.com/app3880825.';

		return text;
	}
});